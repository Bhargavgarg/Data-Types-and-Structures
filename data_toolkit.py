# -*- coding: utf-8 -*-
"""Data_Toolkit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GTv0Mz3k7Yw8ZaWRsuVUUERbd95Dtsa5
"""



"""         **   Assignment :-  Data Toolkit**

 1.What is NumPy, and why is it widely used in Python?

 ans>> NumPy (Numerical Python) is a library for numerical computing.

Provides multi-dimensional arrays (ndarray) with efficient memory usage.

Supports vectorized operations, avoiding slow Python loops.

Has functions for linear algebra, statistics, Fourier transforms, etc.

Widely used in data science, machine learning, and scientific computing because of its speed and integration with libraries like Pandas, Scikit-learn, TensorFlow, etc.

 2.How does broadcasting work in NumPy?

 ans>> Broadcasting allows operations between arrays of different shapes without explicitly replicating data.

 3.What is a Pandas DataFrame?

 ans>>A Pandas DataFrame is a two-dimensional, labeled data structure similar to an Excel sheet. It consists of rows and columns, supports different data types, and is used for data storage, cleaning, and analysis.

 4.Explain the use of the groupby() method in Pandas?

 ans>>The groupby() method is used to split data into groups based on one or more columns, apply aggregation or transformations (like sum, mean, count), and then combine the results. It helps in summarizing and analyzing grouped data.

 5.Why is Seaborn preferred for statistical visualizations?

ans>>Seaborn is preferred because it provides high-level, easy-to-use functions for creating attractive and informative statistical plots. It handles themes, color palettes, and statistical calculations automatically, making visualizations simpler and more insightful than Matplotlib alone.

 6.What are the differences between NumPy arrays and Python lists?

 ans>> NumPy arrays are homogeneous (all elements of the same type), while lists can hold mixed data types.

Arrays are faster and more memory-efficient than lists.

Arrays support vectorized operations, whereas lists require explicit loops.

Arrays can handle multi-dimensional data directly, while lists need nesting.

 7.What is a heatmap, and when should it be used?

 ans>>A heatmap is a data visualization technique that represents values as colors in a matrix. It is used to show correlations between variables, detect patterns, highlight high/low values, and analyze relationships in large datasets.

 8.What does the term “vectorized operation” mean in NumPy?

 ans>>Vectorized operation means performing arithmetic or logical operations on entire arrays at once without using explicit Python loops. This improves speed and efficiency by leveraging optimized C-based implementations.

 9.How does Matplotlib differ from Plotly?

 ans>> Matplotlib creates static, publication-ready plots and is highly customizable.

Plotly creates interactive, web-based visualizations with features like zoom, hover tooltips, and animations.

Matplotlib is better for research papers, while Plotly is better for dashboards and presentations.

 10. What is the significance of hierarchical indexing in Pandas?

 ans>>  Hierarchical indexing (MultiIndex) allows multiple levels of indexing on rows or columns. It enables handling of higher-dimensional data in a 2D table, supports complex grouping, and makes reshaping and analyzing multi-level data easier.

 11.What is the role of Seaborn’s pairplot() function?

 ans>>The pairplot() function in Seaborn creates a grid of plots showing relationships between all pairs of numerical variables in a dataset. It displays scatter plots for variable pairs and histograms/KDE plots on the diagonal, making it useful for exploratory data analysis.

 12.What is the purpose of the describe() function in Pandas?

 ans>>The describe() function generates summary statistics of numerical columns, such as count, mean, standard deviation, minimum, maximum, and quartiles. It helps in quickly understanding the distribution and spread of the data.

 13.Why is handling missing data important in Pandas?

 ans>> Handling missing data is important because NaN values can cause errors in calculations, bias results, or prevent models from running. Pandas provides methods like fillna(), dropna(), and interpolate() to manage missing values effectively.

 14.What are the benefits of using Plotly for data visualization?

 ans>> Provides interactive charts with zoom, pan, and hover features.

Supports a wide variety of visualizations, including 3D and animated plots.

Easily integrates with dashboards and web applications.

Makes data presentation more engaging and user-friendly.

 15.How does NumPy handle multidimensional arrays?

 ans>> NumPy uses the ndarray object to store multidimensional arrays. These arrays can have any number of dimensions (1D, 2D, 3D, etc.) and support operations like slicing, reshaping, transposing, and mathematical computations efficiently in contiguous memory.

 16.What is the role of Bokeh in data visualization?

 ans>> Bokeh is a Python library for creating interactive visualizations for modern web browsers. It is useful for dashboards, streaming data applications, and real-time visualization, and it integrates well with web frameworks like Flask and Django.

 17.Explain the difference between apply() and map() in PandasA.

 ans>> map() is used only with Pandas Series and applies a function element-wise.

apply() works with both Series and DataFrames. It can apply a function row-wise or column-wise across the entire DataFrame.

 18.What are some advanced features of NumPy?

 ans>> Broadcasting for efficient operations on arrays of different shapes.

Universal functions (ufuncs) for fast element-wise computation.

Linear algebra, Fourier transforms, and random number generation.

Structured and masked arrays for complex data types.

Views and memory sharing to avoid unnecessary copies.

 19.How does Pandas simplify time series analysis?

 ans>> Pandas provides a DateTimeIndex, resampling methods (e.g., daily to monthly), rolling and shifting operations, and built-in date/time functions. These features make it easy to process, analyze, and visualize time series data.

 20.What is the role of a pivot table in Pandas?

 ans>> The pivot_table() function summarizes and reshapes data, similar to Excel pivot tables. It allows grouping by multiple keys and applying aggregation functions like sum, mean, or count.

 21.Why is NumPy’s array slicing faster than Python’s list slicing?

 ans>> NumPy slicing creates views of the original array, meaning it doesn’t copy data but points to the same memory. In contrast, Python list slicing creates new lists, which takes more time and memory.

 22.What are some common use cases for Seaborn?     

 ans>>Correlation analysis using heatmaps.

Distribution analysis with histograms, KDE plots, boxplots, and violin plots.

Relationship analysis with scatter plots and regression plots.

Multivariate exploration using pairplots and categorical plots.
"""

#1 How do you create a 2D NumPy array and calculate the sum of each row?
import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
row_sum = np.sum(arr, axis=1)
print("Array:\n", arr)
print("Sum of each row:", row_sum)

#2 Write a Pandas script to find the mean of a specific column in a DataFrame.
import pandas as pd

data = {'Name': ['A', 'B', 'C'], 'Marks': [85, 90, 78]}
df = pd.DataFrame(data)
mean_value = df['Marks'].mean()
print("Mean of Marks column:", mean_value)

#3 Create a scatter plot using Matplotlib.
import matplotlib.pyplot as plt

x = [5, 7, 8, 7, 6, 9, 5, 6]
y = [99, 86, 87, 88, 100, 86, 103, 87]

plt.scatter(x, y)
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.title("Scatter Plot Example")
plt.show()

#4How do you calculate the correlation matrix using Seaborn and visualize it with a heatmap?
import seaborn as sns
import pandas as pd

df = pd.DataFrame({
    'A': [1, 2, 3, 4, 5],
    'B': [5, 4, 3, 2, 1],
    'C': [2, 3, 4, 5, 6]
})

corr = df.corr()
sns.heatmap(corr, annot=True, cmap="coolwarm")

#5  Generate a bar plot using Plotly.
import plotly.express as px
import pandas as pd

df = pd.DataFrame({"Fruits": ["Apple", "Banana", "Mango"], "Count": [10, 15, 7]})
fig = px.bar(df, x="Fruits", y="Count", title="Bar Plot Example")
fig.show()

#6 Create a DataFrame and add a new column based on an existing column.
import pandas as pd

df = pd.DataFrame({'Name': ['A', 'B', 'C'], 'Marks': [80, 70, 90]})
df['Result'] = df['Marks'].apply(lambda x: 'Pass' if x >= 75 else 'Fail')
print(df)

#7 Write a program to perform element-wise multiplication of two NumPy arrays.
import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
result = a * b
print("Element-wise multiplication:", result)

#8 Create a line plot with multiple lines using Matplotlib.
import matplotlib.pyplot as plt

x = [1, 2, 3, 4, 5]
y1 = [2, 4, 6, 8, 10]
y2 = [1, 3, 5, 7, 9]

plt.plot(x, y1, label="Line 1")
plt.plot(x, y2, label="Line 2")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.title("Multiple Line Plot")
plt.legend()
plt.show()

#9 Generate a Pandas DataFrame and filter rows where a column value is greater than a threshold.
import pandas as pd

df = pd.DataFrame({'Name': ['A', 'B', 'C'], 'Marks': [50, 85, 92]})
filtered = df[df['Marks'] > 80]
print(filtered)

#10 Create a histogram using Seaborn to visualize a distribution.
import seaborn as sns
import numpy as np

data = np.random.randn(1000)
sns.histplot(data, bins=30, kde=True)

#11 Perform matrix multiplication using NumPy.
import numpy as np

a = np.array([[1, 2], [3, 4]])
b = np.array([[5, 6], [7, 8]])
result = np.dot(a, b)
print("Matrix Multiplication:\n", result)

#12 Use Pandas to load a CSV file and display its first 5 rows.
import pandas as pd

df = pd.read_csv("/content/Bank_churn.csv")   # replace with your CSV file path
print(df.head())

#13 Create a 3D scatter plot using Plotly.
import plotly.express as px
import pandas as pd

df = pd.DataFrame({
    "x": [1, 2, 3, 4, 5],
    "y": [10, 11, 12, 13, 14],
    "z": [5, 6, 7, 8, 9]
})

fig = px.scatter_3d(df, x="x", y="y", z="z", title="3D Scatter Plot")
fig.show()